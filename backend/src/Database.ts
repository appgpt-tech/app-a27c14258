//Source code generated by AppGPT (www.appgpt.tech)

//Class to create tables and seed new database
import { DataSource } from 'typeorm';
import { DBConfiguration } from './Configuration';
import { SettingsEntity } from './db/Settings.entity';
//autogenerate imports based on resources
import { playersEntity } from './db/players.entity';
import { tournamentsEntity } from './db/tournaments.entity';

export class Database {
  static dbConfiguration: DBConfiguration;
  public static ds: DataSource;

  static async Initialize(dbConfiguration: DBConfiguration) {
    Database.dbConfiguration = dbConfiguration;
    let dbConfig: any = dbConfiguration as any;
    //Autogenerate entities array from resource names

    dbConfig.entities = [SettingsEntity, playersEntity, tournamentsEntity];
    Database.ds = new DataSource(dbConfig);
    await Database.ds.initialize();

    //TODO: Drop all tables

    await Database.Seed();
  }
  static async Seed() {
    let data: any = {
      players: [
        {
          playerId: 1,
          name: 'name 1',
          email: 'email 1',
          totalEarnings: 0.18,
          withdrawalDetails: 'withdrawalDetails 1',
          id: 78,
        },
        {
          playerId: 2,
          name: 'name 2',
          email: 'email 2',
          totalEarnings: 0.46,
          withdrawalDetails: 'withdrawalDetails 2',
          id: 7,
        },
        {
          playerId: 3,
          name: 'name 3',
          email: 'email 3',
          totalEarnings: 0.37,
          withdrawalDetails: 'withdrawalDetails 3',
          id: 78,
        },
        {
          playerId: 4,
          name: 'name 4',
          email: 'email 4',
          totalEarnings: 0.26,
          withdrawalDetails: 'withdrawalDetails 4',
          id: 66,
        },
        {
          playerId: 5,
          name: 'name 5',
          email: 'email 5',
          totalEarnings: 0.49,
          withdrawalDetails: 'withdrawalDetails 5',
          id: 68,
        },
      ],
      tournaments: [
        {
          tournamentId: 1,
          tournamentName: 'tournamentName 1',
          startDate: '2023-06-11T18:27:12.210Z',
          endDate: '2023-07-18T17:46:28.710Z',
          entryFee: 0.95,
          prizePool: 0.75,
          status: 'status 1',
          id: 27,
        },
        {
          tournamentId: 2,
          tournamentName: 'tournamentName 2',
          startDate: '2023-08-20T00:17:46.827Z',
          endDate: '2025-04-05T03:57:21.572Z',
          entryFee: 0,
          prizePool: 0.64,
          status: 'status 2',
          id: 62,
        },
        {
          tournamentId: 3,
          tournamentName: 'tournamentName 3',
          startDate: '2024-03-08T13:50:00.112Z',
          endDate: '2025-02-18T14:07:28.264Z',
          entryFee: 0.36,
          prizePool: 0.47,
          status: 'status 3',
          id: 21,
        },
        {
          tournamentId: 4,
          tournamentName: 'tournamentName 4',
          startDate: '2025-01-22T03:31:43.478Z',
          endDate: '2023-11-03T09:23:02.276Z',
          entryFee: 0.49,
          prizePool: 0.15,
          status: 'status 4',
          id: 72,
        },
        {
          tournamentId: 5,
          tournamentName: 'tournamentName 5',
          startDate: '2023-08-09T06:00:56.274Z',
          endDate: '2023-08-28T12:31:42.040Z',
          entryFee: 0.31,
          prizePool: 0.79,
          status: 'status 5',
          id: 9,
        },
      ],
    };
    //Autogenerate multiple such calls ie for each resource and its data object
    let isSeeded = await this.IsSeeded();
    //if (!isSeeded) {
    //forcing app recreation
    if (true) {
      console.log('   Seeding database...');
      await this.SeedResource('playersEntity', data.players);
      await this.SeedResource('tournamentsEntity', data.tournaments);
      await this.SeedResource('SettingsEntity', {
        settingname: 'isSeeded',
        settingvalue: 'true',
      });
    } else {
      console.log('   Database seeded already!');
    }
  }
  static async IsSeeded() {
    const repo = Database.ds.getRepository('SettingsEntity');
    let rec: any = await repo.findOne({
      select: {
        settingname: true,
        settingvalue: true,
      },
      where: {
        settingname: 'isSeeded',
      },
    });
    if (rec && rec.settingvalue) return true;
    return false;
  }
  static async SeedResource(resourceName: any, resourceData: any) {
    const repo = Database.ds.getRepository(resourceName);
    //await repo.clear();
    console.log('   Seeding table ' + resourceName);
    await repo.upsert(resourceData, ['id']);
  }
}
